package supermodel.extensions;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.Printerpackage indirectionsoftware.idc.extensions;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileNotFoundException;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.TreeSet;
import java.util.Vector;

import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RepaintManager;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;

public class IDCReportPanel extends JPanel implements TableModel, TableCellRenderer {
	
	IDCModelData app = IDCSchema.getApplication();
	
	private IDCEditorPane panel;
	
	private JTable table;
	
	int[] sortSequence;
	boolean[] isDescending;
	
	static final int TABLE=0, HTML=1; 
	int type=TABLE;
	
	IDCModelData report;
	
	Vector<Vector> reportDataVect;
	
	Vector<String> colHeaders;
	
	/************************************************************************/

	public IDCReportPanel() {
		

	}	
	
	public void print() {
		PrinterJob job = PrinterJob.getPrinterJob();
		job.setPrintable(panel);
		if (job.printDialog()) {
			try {
				job.print();
			} catch (Exception ex) {
				IDCUtils.debug(ex);
			}
		}	
	}
	
    /************************************************************************/

    public void refresh() {

    	removeAll();
    	
    	String text = null;
    	
    	try {
    		text = execute();
    	} catch(Exception e) {
    		text = "Error executing report :-(";
    	}
    	
		panel =  new IDCEditorPane();
		panel.setEditable(false);
		panel.setContentType("text/html");
    	panel.setText(text);
    	panel.setCaretPosition(0);
    	
		JScrollPane scrollPane = new JScrollPane(panel); 
		add(scrollPane, BorderLayout.CENTER);

    	repaint();
    	
	}

    /************************************************************************/

    public void refresh(IDCModelData report) {
    	
    	this.report = report;

    	refreshData(report);
    	refreshGUI();

    }

    /************************************************************************/

    public void refreshGUI() {
    	
    	removeAll();
    	
    	if(type == TABLE) {

    		setLayout(new BorderLayout());
    		
    		table =  new JTable(this);
    		table.setDefaultRenderer(Object.class, this);
            //table.setPreferredScrollableViewportSize(new Dimension(500, 70));
    		
    		JScrollPane scrollPane = new JScrollPane(table); 
    		add(scrollPane, BorderLayout.CENTER);
    		
    	} else {
    		
    		setLayout(new BorderLayout());
    		
    		panel =  new IDCEditorPane();
    		panel.setEditable(false);
    		panel.setContentType("text/html");
        	panel.setText(displayReportDataInHTML());
        	panel.setCaretPosition(0);
    		
    		JScrollPane scrollPane = new JScrollPane(panel); 
    		add(scrollPane, BorderLayout.CENTER);
    		

    	}

    	repaint();

    }

    /************************************************************************/

	public class IDCEditorPane extends JEditorPane implements Printable, Serializable {

		public int print(Graphics g, PageFormat pf, int pageIndex) throws PrinterException {
			
			Graphics2D g2 = (Graphics2D)g;
			g2.setColor (Color.black);

			RepaintManager.currentManager(this).setDoubleBufferingEnabled(false);
			Dimension d = this.getSize();
			double panelWidth = d.width;
			double panelHeight = d.height;
			double pageWidth = pf.getImageableWidth();
			double pageHeight = pf.getImageableHeight();
			double scale = pageWidth / panelWidth;
			int totalNumPages = (int)Math.ceil(scale * panelHeight /
			pageHeight);

//			 Check for empty pages
			if (pageIndex >= totalNumPages) return Printable.NO_SUCH_PAGE;

			g2.translate(pf.getImageableX(), pf.getImageableY());
			g2.translate(0f, -pageIndex * pageHeight);
			g2.scale(scale, scale);
			this.paint(g2);

			return Printable.PAGE_EXISTS;
		}
    	
    }
	
	
	/**************************************************************************************************/
	
	public void saveChanges(IDCData data) {
		IDCController.getController().saveData(data);
	}

	/**************************************************************************************************/
	
	public Object getValue(IDCData data, String attrName) {
		return IDCSchema.getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public String getValueString(IDCData data, String attrName) {
		return (String) getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public int getValueInt(IDCData data, String attrName) {
		return ((Integer) getValue(data, attrName)).intValue();
	}

	/**************************************************************************************************/
	
	public long getValueLong(IDCData data, String attrName) {
		return ((Long) getValue(data, attrName)).longValue();
	}
	
	/**************************************************************************************************/
	
	public void setValue(IDCData data, String attrName, Object value) {
		IDCSchema.setValue(data, attrName, value);
	}

	/**************************************************************************************************/
	
	public Vector<IDCData> getValueVector(IDCData data, String attrName) {
		return (Vector<IDCData>) IDCSchema.getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public IDCData getValueRef(IDCData data, String attrName) {
		return (IDCData) IDCSchema.getValue(data, attrName);
	}

    /************************************************************************/

    public Vector<IDCData> loadAllObjects(String typeName, String selectionFormula) {
    	return loadAllObjects(IDCSchema.getType(typeName), selectionFormula);
    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(IDCModelData type, String selectionFormula) {
    	
    	Vector<IDCData> ret = new Vector<IDCData>();
    	
    	for(IDCData data : loadAllObjects(type)) {
    		if(IDCUtils.evaluateExpression(selectionFormula, type, data, null)) {
        		ret.add(data);
    		}
    	}
    	
    	return ret;

    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(String typeName) {
    	return loadAllObjects(IDCSchema.getType(typeName));
    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(IDCModelData type) {
    	
    	Vector<IDCData> ret = IDCFactory.getDBI().loadAllObjects(IDCSchema.getDatabaseTable(type));

    	return ret;

    }
    
    /************************************************************************/

    public IDCData loadObject(String typeName, long id) {
    	
    	IDCData ret = IDCFactory.getDBI().loadObject(IDCSchema.getDatabaseTable(IDCSchema.getType(typeName)), id);

    	return ret;

    }

    /************************************************************************/

    public void editData(IDCData data) {
    	IDCControllerSwing.getSwingController().editData(data);
    }
    
    /************************************************************************/

    public IDCData getNewInstance(String typeName) {
    	IDCData ret = IDCSchema.getNewInstance(IDCSchema.getType(typeName));
    	return ret;
    }
    
    /************************************************************************/

    private String displayReportDataInHTML() {
    	
    	String ret = "";

    	ret += "<table border=1>";
    	
    	ret += "<tr>";
    	
    	Vector<IDCModelData> fields = report.getReportFields();
			
    	for(String header : colHeaders) {
    		ret += "<td><B>" + header + "</B></td>";
		}
    	
    	ret += "</tr>";
    	
    	for(Vector reportData : reportDataVect) {
    		
        	ret += "<tr>";

        	for(Object value : reportData) {
    			ret += "<td>" + (value == null ? "(NA)" : value) + "</td>";
        	}

        	ret += "</tr>";
    		
    	}
    	
    	ret += "</table>";
    	
    	return ret;
	
    }

    /************************************************************************/

    private void refreshData(IDCModelData report) {
    	
    	TreeSet<IDCReportData> reportDataList = new TreeSet<IDCReportData>();
    	
    	Vector<IDCModelData> fields = report.getReportFields();
			
    	Vector<String> tempColFormulas = new Vector<String>();
    	Vector<String> tempColHeaders = new Vector<String>();

    	int[] tempSeqs = new int[fields.size()];
    	boolean[] tempIsDesc = new boolean[fields.size()];

    	boolean[] isHidden = new boolean[fields.size()];
    	
    	int nCol=0, maxSeq=0;;
    	for(IDCModelData field : fields) {

			isHidden[nCol] = field.isReportFieldHidden();
			tempColFormulas.add(field.getReportFieldFormula());
			tempColHeaders.add(field.getReportFieldHeader());

    		int seq = field.getReportFieldSortSequence();
    		if(seq != -1) {
    			tempSeqs[seq] = nCol;
    			tempIsDesc[seq] = field.isReportFieldDescending();
    			if(seq > maxSeq) {
    				maxSeq = seq;
    			}
    		}
		
    		nCol++;
    	}
    	
		sortSequence = new int[maxSeq+1];
		isDescending = new boolean[maxSeq+1];
    	for(int i=0; i<=maxSeq; i++) {
    		sortSequence[i] = tempSeqs[i];
    		isDescending[i] = tempIsDesc[i];
    	}
    	
    	IDCModelData type = IDCSchema.getType(report.getValueString(IDCSchema.REPORT_TYPE));
    	
    	//String selectionFormula = "{If(" + report.getReportSelectionFormula() + ",true,false)}";
    	String selectionFormula = report.getReportSelectionFormula();

    	for(IDCData data : loadAllObjects(type)) {
    		
    		if(IDCUtils.evaluateExpression(selectionFormula, type, data, null)) {
    			
        		Vector values = new Vector();
        		
            	for(String formula : tempColFormulas) {
        			
            		IDCExpressionEvaluator attrEval = new IDCExpressionEvaluator(data, type, formula, null,IDCExpressionEvaluator.VIEW_MODE);
            		Object object = attrEval.evaluate(false);
        		
        			values.add(object);
        			
            	}

    			IDCReportData reportData = new IDCReportData(values);
    			reportDataList.add(reportData);

    		}

    	}
    	
    	reportDataVect = new Vector<Vector>();
    	
    	for(IDCReportData reportData : reportDataList) {
    		
        	nCol=0;
        	Vector row = new Vector();

        	nCol = 0;
        	for(Object value : reportData.values) {

        		if(!isHidden[nCol]) {
            		if(value instanceof Vector) {
            			value = ((Vector) value).get(1);
            		}
            		row.add(value);
        		}
        		nCol++;
        	}
        	
        	reportDataVect.add(row);

    	}
    	
    	colHeaders = new Vector<String>();

    	nCol=0;
    	for(String header : tempColHeaders) {
			
    		if(!isHidden[nCol]) {
    			if(header == null || header.length() == 0) {
    				header = tempColFormulas.get(nCol);
    			}
    			colHeaders.add(header);
    		}
			nCol++;
    	}

    	
    }

    /************************************************************************/

	public String execute() throws SQLException, FileNotFoundException {
		return "not available";
	}
	
    /************************************************************************/

	private class IDCReportData implements Comparable {

		Vector values;
		
		public IDCReportData(Vector values) {
			this.values = values;
		}
		
		public int compareTo(Object comp) {
			
			int ret=0;
			
			//IDCUtils.debug("Comparing " + this.values.get(2) + " to " + ((IDCReportData)comp).values.get(2) );
			//IDCUtils.debug(" >> sortSequence length = " + sortSequence.length);
			
			for(int nSort=0, maxSort=sortSequence.length; nSort < maxSort && ret==0; nSort++) {
				
				int nCol = sortSequence[nSort];
				boolean isDesc = isDescending[nSort];
				Object o1 = values.get(nCol);
				Object o2 = ((IDCReportData)comp).values.get(nCol);
				
				Object val1 = o1;
				Object val2 = o2;
				if(val1 instanceof Vector) {
					val1 = ((Vector)val1).get(0);
					val2 = ((Vector)val2).get(0);
				}

				int test = IDCExpressionEvaluator.compare(val1, val2);
				//IDCUtils.debug(" >> " + val1 + " / " + val2 + " -> " + test);
				if(test != -2) {
					if(!isDesc) {
						ret = test;
					} else {
						ret = test * (-1);
					}
				}

			}
			
			return ret;
		}
		
	}

    /************************************************************************/

	public void addTableModelListener(TableModelListener arg0) {
	}

	public Class<?> getColumnClass(int nCol) {
		return Object.class;
	}

	public int getColumnCount() {
		return colHeaders.size();
	}

	public String getColumnName(int nCol) {
		return colHeaders.get(nCol);
	}

	public int getRowCount() {
		return reportDataVect.size();
	}

	public Object getValueAt(int nRow, int nCol) {

		Object ret = reportDataVect.get(nRow).get(nCol);
		
		if(ret == null) {
			ret = "";
		}
		
		return ret;
		
	}

	public boolean isCellEditable(int arg0, int arg1) {
		return false;
	}

	public void removeTableModelListener(TableModelListener arg0) {
	}

	public void setValueAt(Object arg0, int arg1, int arg2) {
	}

    /************************************************************************/

	static final Color ON_COLOR = new Color(190, 190, 255);
	static final Color OFF_COLOR = Color.white;
	
	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

		String labelText = "";
		
		if(value != null) {
			labelText = value.toString();
		}
		JLabel label = new JLabel(labelText);
		
		int r = row % 2;
		if(r == 0) {
			label.setBackground(ON_COLOR);
		} else {
			label.setBackground(OFF_COLOR);
		}
		label.setOpaque(true);
		
		return label;
		
	}

}
Job;
import java.io.FileNotFoundException;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.TreeSet;
import java.util.Vector;

import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.RepaintManager;

import supermodel.gui.IDCGUIComponent;
import supermodel.gui.swing.IDCDefaultReportPanel.IDCEditorPane;
import supermodel.metamodel.IDCModelData;
import supermodel.runtime.IDCController;
import supermodel.runtime.IDCControllerSwing;
import supermodel.runtime.IDCData;
import supermodel.runtime.IDCFactory;
import supermodel.runtime.IDCSchema;
import supermodel.utils.IDCExpressionEvaluator;
import supermodel.utils.IDCUtils;

public class IDCReportPanel extends JPanel {
	
	IDCModelData app = IDCSchema.getApplication();
	
	private IDCEditorPane panel;
	
	int[] sortSequence;
	boolean[] isDescending;
	boolean[] isHidden;
	
    /************************************************************************/

	public IDCReportPanel() {
		
		setLayout(new BorderLayout());
		
		panel =  new IDCEditorPane();
		panel.setEditable(false);
		panel.setContentType("text/html");
		//panel.setBackground(getBackgroundColor());
		//panel.setForeground(getForeground());
		//panel.setPreferredSize(new Dimension(300, 300));
		
		JScrollPane scrollPane = new JScrollPane(panel); 
		add(scrollPane, BorderLayout.CENTER);

	}	
	
	public void print() {
		PrinterJob job = PrinterJob.getPrinterJob();
		job.setPrintable(panel);
		if (job.printDialog()) {
			try {
				job.print();
			} catch (Exception ex) {
				IDCUtils.debug(ex);
			}
		}	
	}
	
    /************************************************************************/

    public void refresh() {

    	String text = null;
    	
    	try {
    		text = execute();
    	} catch(Exception e) {
    		text = "Error executing report :-(";
    	}
    	
    	panel.setText(text);
    	panel.setCaretPosition(0);
    	repaint();
    	
	}

    /************************************************************************/

    public void refresh(IDCModelData report) {

    	panel.setText(executeCannedReport(report));
    	panel.setCaretPosition(0);
    	repaint();

    }

    /************************************************************************/

	public class IDCEditorPane extends JEditorPane implements Printable, Serializable {

		public int print(Graphics g, PageFormat pf, int pageIndex) throws PrinterException {
			
			Graphics2D g2 = (Graphics2D)g;
			g2.setColor (Color.black);

			RepaintManager.currentManager(this).setDoubleBufferingEnabled(false);
			Dimension d = this.getSize();
			double panelWidth = d.width;
			double panelHeight = d.height;
			double pageWidth = pf.getImageableWidth();
			double pageHeight = pf.getImageableHeight();
			double scale = pageWidth / panelWidth;
			int totalNumPages = (int)Math.ceil(scale * panelHeight /
			pageHeight);

//			 Check for empty pages
			if (pageIndex >= totalNumPages) return Printable.NO_SUCH_PAGE;

			g2.translate(pf.getImageableX(), pf.getImageableY());
			g2.translate(0f, -pageIndex * pageHeight);
			g2.scale(scale, scale);
			this.paint(g2);

			return Printable.PAGE_EXISTS;
		}
    	
    }
	
	
	/**************************************************************************************************/
	
	public void saveChanges(IDCData data) {
		IDCController.getController().saveData(data);
	}

	/**************************************************************************************************/
	
	public Object getValue(IDCData data, String attrName) {
		return IDCSchema.getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public String getValueString(IDCData data, String attrName) {
		return (String) getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public int getValueInt(IDCData data, String attrName) {
		return ((Integer) getValue(data, attrName)).intValue();
	}

	/**************************************************************************************************/
	
	public long getValueLong(IDCData data, String attrName) {
		return ((Long) getValue(data, attrName)).longValue();
	}
	
	/**************************************************************************************************/
	
	public void setValue(IDCData data, String attrName, Object value) {
		IDCSchema.setValue(data, attrName, value);
	}

	/**************************************************************************************************/
	
	public Vector<IDCData> getValueVector(IDCData data, String attrName) {
		return (Vector<IDCData>) IDCSchema.getValue(data, attrName);
	}

	/**************************************************************************************************/
	
	public IDCData getValueRef(IDCData data, String attrName) {
		return (IDCData) IDCSchema.getValue(data, attrName);
	}

    /************************************************************************/

    public Vector<IDCData> loadAllObjects(String typeName, String selectionFormula) {
    	return loadAllObjects(IDCSchema.getType(typeName), selectionFormula);
    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(IDCModelData type, String selectionFormula) {
    	
    	Vector<IDCData> ret = new Vector<IDCData>();
    	
    	for(IDCData data : loadAllObjects(type)) {
    		if(IDCUtils.evaluateExpression(selectionFormula, type, data, null)) {
        		ret.add(data);
    		}
    	}
    	
    	return ret;

    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(String typeName) {
    	return loadAllObjects(IDCSchema.getType(typeName));
    }
    
    /************************************************************************/

    public Vector<IDCData> loadAllObjects(IDCModelData type) {
    	
    	Vector<IDCData> ret = IDCFactory.getDBI().loadAllObjects(IDCSchema.getDatabaseTable(type));

    	return ret;

    }
    
    /************************************************************************/

    public IDCData loadObject(String typeName, long id) {
    	
    	IDCData ret = IDCFactory.getDBI().loadObject(IDCSchema.getDatabaseTable(IDCSchema.getType(typeName)), id);

    	return ret;

    }

    /************************************************************************/

    public void editData(IDCData data) {
    	IDCControllerSwing.getSwingController().editData(data);
    }
    
    /************************************************************************/

    public IDCData getNewInstance(String typeName) {
    	IDCData ret = IDCSchema.getNewInstance(IDCSchema.getType(typeName));
    	return ret;
    }
    
    /************************************************************************/

    private String executeCannedReport(IDCModelData report) {
    	
    	String ret = "";

    	ret += "<table border=1>";
    	
    	ret += "<tr>";
    	
    	Vector<IDCModelData> fields = report.getReportFields();
			
    	Vector<String> formulas = new Vector<String>();

    	int[] tempSeqs = new int[fields.size()];
    	boolean[] tempIsDesc = new boolean[fields.size()];

    	isHidden = new boolean[fields.size()];
    	
    	int nCol=0, maxSeq=0;;
    	for(IDCModelData field : fields) {

			isHidden[nCol] = field.isReportFieldHidden();

			String formula  = field.getReportFieldFormula();
    		formulas.add(formula);
    		if(!isHidden[nCol]) {
        		ret += "<td><B>" + formula + "</B></td>";
    		}

    		int seq = field.getReportFieldSortSequence();
    		if(seq != -1) {
    			tempSeqs[seq] = nCol;
    			tempIsDesc[seq] = field.isReportFieldDescending();
    			if(seq > maxSeq) {
    				maxSeq = seq;
    			}
    		}
		
    		nCol++;
    	}
    	
		sortSequence = new int[maxSeq+1];
		isDescending = new boolean[maxSeq+1];
    	for(int i=0; i<=maxSeq; i++) {
    		sortSequence[i] = tempSeqs[i];
    		isDescending[i] = tempIsDesc[i];
    	}
    	
    	ret += "</tr>";
		
    	IDCModelData type = IDCSchema.getType(report.getValueString(IDCSchema.REPORT_TYPE));
    	
    	//String selectionFormula = "{If(" + report.getReportSelectionFormula() + ",true,false)}";
    	String selectionFormula = report.getReportSelectionFormula();

    	TreeSet<IDCReportData> list = new TreeSet<IDCReportData>();
    	
    	for(IDCData data : loadAllObjects(type)) {
    		
    		if(IDCUtils.evaluateExpression(selectionFormula, type, data, null)) {
    			
        		Vector values = new Vector();
        		
            	for(String formula : formulas) {
        			
            		IDCExpressionEvaluator attrEval = new IDCExpressionEvaluator(data, type, formula, null,IDCExpressionEvaluator.VIEW_MODE);
            		Object object = attrEval.evaluate(false);
        		
        			values.add(object);
        			
            	}

    			IDCReportData reportData = new IDCReportData(values);
    			list.add(reportData);

    		}

    	}
    	
    	for(IDCReportData reportData : list) {
    		
        	ret += "<tr>";

        	nCol=0;

        	for(Object value: reportData.values) {

        		if(value instanceof Vector) {
        			value = ((Vector) value).get(1);
        		}
        		if(!isHidden[nCol]) {
        			ret += "<td>" + (value == null ? "(NA)" : value) + "</td>";
        		}
            	nCol++;
        	}

        	ret += "</tr>";
    		
    	}
    	
    	ret += "</table>";
    	
    	return ret;
	
    }

    /************************************************************************/

	public String execute() throws SQLException, FileNotFoundException {
		return "not available";
	}
	
    /************************************************************************/

	private class IDCReportData implements Comparable {

		Vector values;
		
		public IDCReportData(Vector values) {
			this.values = values;
		}
		
		public int compareTo(Object comp) {
			
			int ret=0;
			
			//IDCUtils.debug("Comparing " + this.values.get(2) + " to " + ((IDCReportData)comp).values.get(2) );
			//IDCUtils.debug(" >> sortSequence length = " + sortSequence.length);
			
			for(int nSort=0, maxSort=sortSequence.length; nSort < maxSort && ret==0; nSort++) {
				
				int nCol = sortSequence[nSort];
				boolean isDesc = isDescending[nSort];
				Object o1 = values.get(nCol);
				Object o2 = ((IDCReportData)comp).values.get(nCol);
				
				Object val1 = o1;
				Object val2 = o2;
				if(val1 instanceof Vector) {
					val1 = ((Vector)val1).get(0);
					val2 = ((Vector)val2).get(0);
				}

				int test = IDCExpressionEvaluator.compare(val1, val2);
				//IDCUtils.debug(" >> " + val1 + " / " + val2 + " -> " + test);
				if(test != -2) {
					if(!isDesc) {
						ret = test;
					} else {
						ret = test * (-1);
					}
				}

			}
			
			return ret;
		}
		
	}

}
