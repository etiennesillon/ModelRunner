package com.indirectionsoftware.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.HttpRetryException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;

import com.indirectionsoftware.client.runtime.IDCError;
import com.indirectionsoftware.client.swing.IDCViewPanel;

public class IDCUtils {
		
	static String EOL = "\n"; 
	
	static final String[] IFOPERATORS = {"=", "!=", "GT", "LT", "GE", "LE", "AND", "OR"};
	public static final int EQUALS=0, NOTEQUALS=1, GREATER=2, LESS=3, GREATEREQUAL=4, LESSEQUAL=5, AND=6, OR=7;
	
	public static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	
	public static final int COL_WIDTH = 15;
	
	public static String SEPARATOR = " , ";
	
    /************************************************************************************************/
    // STRINGS ...
    /************************************************************************************************/

    public static String makeFixedLength(String s, int len) { 
    	
    	String ret = "";
    	
    	int i=0;
    	while(i<s.length() && i<len) {
    		ret+= s.charAt(i++);
    	}
    	
    	while(i++<len) {
    		ret+=" ";
    	}
    	
    	return ret.trim();
    	
    }
    	
    /************************************************************************************************/

    public static String convert2SQL(String s) { 
    	
    	String ret = "";
    	
    	for(int nChar=0, maxChars=s.length(); nChar < maxChars; nChar++) {
    		char c = s.charAt(nChar);
    		if(c != '\'') {
    			ret += c;
    		} else {
    			ret += "''";
    		}
    	}
    	
    	return ret.trim();
    	
    }
    	
    /************************************************************************************************/
    // TRANSLATIONS ...
    /************************************************************************************************/
    
    public static boolean translateBoolean(String s) {
    	return translateBoolean(s, true);
    }
    
    public static boolean translateBoolean(String s, boolean defValue) {
    	
    	boolean ret = defValue;
    	
    	if(s != null && s.length() > 0) {
        	if(s.equalsIgnoreCase("true") || s.equals("1")) {
        		ret = true;
        	} else if(s.equalsIgnoreCase("false") || s.equals("0")) {
        		ret = false;
        	} 
    	} 
    	
    	return ret;
    }
    
    /************************************************************************************************/

    public static int translateInteger(String s) {
    	
    	int ret = -1;
    	
    	try {
    		ret = Integer.parseInt(s);
    	} catch(Exception ex) {}
    	
    	return ret;
    	
    }
    
    /************************************************************************************************/

    public static long translateLong(String s) {
    	
    	long ret = -1;
    	
    	try {
    		ret = Long.parseLong(s);
    	} catch(Exception ex) {}
    	
    	return ret;
    	
    }
    
    /************************************************************************************************/
    // COMPARISIONS ...
    /************************************************************************************************/
    
	public static int compare(Object op1, Object op2) {
    	
    	int ret=-2;
    	
		if(op1 == null) {

			if(op2 == null) {
				ret=0;
			} else {
				ret=-1;
			}
			
		} else if(op2 == null) {

			ret=1;
		
		} else {
			
			String val1Str = ""+op1;
			String val2Str = ""+op2;
			
			boolean bothNumbers=true;
			double val1Num=0;
			double val2Num=0;
			
			try {
				val1Num = Double.parseDouble(val1Str);
				val2Num = Double.parseDouble(val2Str);
			} catch(Exception ex) {
				bothNumbers=false;
			}
			
			if(bothNumbers) {
				
				if((val1Num == val2Num)) {
					ret=0;
				} else if((val1Num > val2Num)) {
					ret=1;
				} else {
					ret = -1;
				}

			} else {
				
				ret = val1Str.compareTo(val2Str);
			
			}

		}
		
    	return ret;
    	
    }

    /***************************************************************/
    /** Load Properties file ...                                  **/
    /***************************************************************/

    public static Properties loadProperties(String fn) throws IOException {

   	  Properties ret = new Properties();	
    	
	  ret.load(new FileInputStream(new File(fn)));
	  
	  return ret;
   		
    }
	    
	/*******************************************************************************************************/
	
	public static String readFile(String fn) {
		
		String ret = "";
		
		try {
			ret = readFile(new File(fn));
		} catch (Exception e) {
			ret = null;
		}
		
		return ret;
		
	}

	/*******************************************************************************************************/
	
	public static String readFile(File file) {
		
		String ret = "";
		
		BufferedReader in;
		try {
			in = new BufferedReader(new FileReader(file));
			String line = in.readLine();
			while(line != null) {
				ret += line;
				line = in.readLine();
			}
			in.close();
		} catch (Exception e) {
			ret = null;
		}
		
		return ret;
		
	}

	/************************************************************************************************/

	/************************************************************************************************/

    public static void writeXMLHeader(PrintWriter out) {
		out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		out.println("<ItemList>");
    }

	/************************************************************************************************/

    public static void writeXMLTrailer(PrintWriter out) {
		out.println("</ItemList>");
    }

    /************************************************************************************************/

    public static Node getXMLAttrNode(NamedNodeMap attrs, String name) {
    	return attrs.getNamedItem(name);
    }

    /************************************************************************************************/

    public static String getXMLAttrValue(NamedNodeMap attrs, String name) {
    	
    	String ret = "";
    	
    	Node node = getXMLAttrNode(attrs, name);
    	if(node != null) {
    		ret = node.getNodeValue(); 
    	}
    	
    	return ret;
    	
    }

    /************************************************************************************************/

    static String xmlCtrlChar[] = {
    	"?", "&#x263a;", "&#x263b;", "&#x2665;", "&#x2666;", "&#x2663;", "&#x2660;", "&#x2022;", "&#x25d8;", "&#x9;",
    	"&#10;", "&#x2642;", "&#x2640;", "&#xd;", "&#x266b;", "&#x263c;", "&#x25ba;", "&#x25c4;", "&#x2195;", "&#x203c;",
    	"&#x00b6;", "&#x00a7;", "&#x25ac;", "&#x21a8;", "&#x2191;", "&#x2193;", "&#x2192;", "&#x2190;", "&#x221f;", "&#x2194;",
    	"&#x25b2;", "&#x25bc;", " "
    };

    public static String convert2XML(String s) {
    	  
    	String ret = "";
    	  
    	if(s != null) {
    		
    		StringBuffer sb = new StringBuffer();
    		  
    		for(int nChar=0, maxChar=s.length(); nChar < maxChar; nChar++) {
    			  
    			char c = s.charAt(nChar);
    			  
    			if(c <= ' ') {
    				sb.append(xmlCtrlChar[c]);
    			} else if(c <= '\u0080') {
    				switch(c) {
    				case 60: // '<'
    					sb.append("&lt;");
    					break;

  	                case 62: // '>'
  	                	sb.append("&gt;");
  	                	break;

  	                case 34: // '"'
  	                	sb.append("&quot;");
  	                	break;

  	                case 39: // '\''
  	                	sb.append("&apos;");
  	                	break;

  	                case 38: // '&'
  	                	sb.append("&amp;");
  	                	break;

  	                default:
  	                	sb.append(c);
  	                	break;
  	                }
    			}
    		}
    	  
	        ret = sb.substring(0);

	    }

    	return ret;

    }

    /************************************************************************************************/

	public static void traceStart(String s) { 
		System.out.println("Thread(" + Thread.currentThread().getId() + ") start " +s); 
	}

    /************************************************************************************************/

	public static void traceEnd(String s) { 
		//System.out.println("Thread(" + Thread.currentThread().getId() + ") end   " +s); 
	}

    /************************************************************************************************/

	public static void error(String s) { 
		System.err.println("ERROR: " +s); 
	}

    /************************************************************************************************/

	public static void debug(String s) { 
		System.out.println("Thread(" + Thread.currentThread().getId() + ") DEBUG: " +s); 
	}

    /************************************************************************************************/

	public static void info(String s) { 
		System.out.println("Thread(" + Thread.currentThread().getId() + ") INFO: " +s); 
	}

    /************************************************************************************************/

	public static String getPlural(String singular) {

		String ret = singular;
		
		String upper = singular.toUpperCase();
		boolean isUpper = singular.equals(upper);
		
		int len = singular.length();
		
		if(upper.charAt(len-1) == 'Y' && !isVowel(singular.charAt(len-2))) {
			ret = singular.substring(0, len-1) + (isUpper ? "IES" : "ies");
		} else if(upper.charAt(len-1) == 'S' || upper.charAt(len-1) == 'Z' || upper.charAt(len-1) == 'X' || upper.endsWith("CH") || upper.endsWith("SH")) {
			ret += (isUpper ? "ES" : "es");
		} else if(!upper.equals("ROOF") && upper.charAt(len-1) == 'F' || upper.endsWith("FE")) {
			ret = singular.substring(0, len-1) + (isUpper ? "VES" : "ves");
		} else {
			ret += (isUpper ? "S" : "s");
		}

		
		return ret;
	}
	
    /************************************************************************************************/

	private static boolean isUpperCase(String s) {
		return s.equals(s.toUpperCase());
	}

    /************************************************************************************************/

	public static boolean isVowel(char c) {
		
		boolean ret = false;
		
		switch(Character.toLowerCase(c)) {
		
			case 'a':
			case 'e':
			case 'i':
			case 'o':
			case 'u':
				ret = true;
				break;
		}
		
		return ret;
		
	}

    private static void replace(String inFileName, String outFileName) {

    	int FLAG[] = {80, 104,97, 114, 50};
    	
    	try {
    		
        	FileReader in = new FileReader(new File(inFileName));
        	FileWriter out = new FileWriter(new File(outFileName));
        	
        	int c, nFlag=0;
            while ((c = in.read()) != -1) {
                //IDCUtils.debug(" c = " + c + " / nFlag = " + nFlag);
            	if(nFlag == 5) {
            		if(c == 58) {
                        //IDCUtils.debug(" found it!");
            			c = 95;
            			nFlag=0;
            		}
            	} else if(c == FLAG[nFlag]) {
            		nFlag++;
        		} else {
        			nFlag = 0;
            	}
                out.write(c);
            }
            
            in.close();
            out.close();
        		

    	} catch(Exception e) {
    	}
    	
		System.exit(0);
	}

    /***************************************************************/
    /** Log to console ...                                        **/
    /***************************************************************/
	  
    public static void logLine() {
    	logLine("");
    }
	  
    public static void logLine(Object o) {
    	logLine(o.toString());
    }
	  
    public static void logLine(String s) {
    	log(s + "\n");
    }
	  
    public static void log(String s) {
    	System.out.print(s);
    }
	  
    /***************************************************************/
	/** String replace method ...                                 **/
	/** String.replaceAll() is a pain to use and doesn't work     **/
	/** when the replacement string includes a $ !                **/
	/***************************************************************/
	
   	public static String replaceAll(String val, String key, String rep) {
   		
   		String ret = val;
   		
   		int ind;
   		while((ind = ret.indexOf(key)) != -1) {
   			ret = ret.substring(0,ind) + rep + ret.substring(ind+key.length());
   		}
   		
   		return ret;
   		
   	}
	  
    /**************************************/
    /** Return string but check for null **/
    /**************************************/
	  	
    public static String getString(String s) {
	    	 
    	return (s == null ? "" : s);
	    	 
    }
    
    /**************************************/
    /** Return XMI Id                    **/
    /**************************************/
	  	
    public static String getXMIId(String itemType, long itemId) {
	    	 
    	String ret = convert2XML("_" + itemType + "_" + itemId);
    	
    	return ret;
	    	 
    }
    
    /*********************************/
    /** Print XMI header and footer **/
    /*********************************/
    
	public static String getXMIHeader() {

		String ret = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
		ret += "<XMI xmi.version=\"1.0\" xmlns:dt=\"urn:schemas-microsoft-com:datatypes\">\n";
		ret += "<XMI.content>\n";

		return ret;
	
	}

	public static String getXMIFooter() {

		String ret = "</XMI.content>\n";
		ret += "</XMI>\n";

		return ret;
	
	}
    
  	/***************************************************************/
	
    public static String getPrefix(String name) {
    	
    	String ret = name;
    	
    	int ind = name.indexOf('.');
    	if(ind != -1) {
        	ret = name.substring(0, ind);
    	}
    	
    	//IDCUtils.debug("getPrefix: name = " + name + " / ret = " + ret);
    	
    	return ret;
    	
    }
     
  	/***************************************************************/
	
    public static String getSuffix(String name) {
    	
    	String ret = name;
    	
    	int ind = name.indexOf('.');
    	if(ind != -1) {
        	ret = name.substring(ind+1, name.length());
    	}
    	
    	//IDCUtils.debug("getSuffix: name = " + name + " / ret = " + ret);
    	
    	return ret;
    	
    }
     
  	/***************************************************************/
	
    public static List<String> parseSQLExpression(String s) {
    	
    	List<String> ret = new ArrayList<String>();
    	
    	String word = "";
    	
    	boolean foundWord=false;
    	int openPar=0;
    	boolean openBrack=false;
    	for(int nChar=0, maxChar= s.length(); nChar < maxChar; nChar++) {
    		
			char c = s.charAt(nChar);
			
			switch(c) {
			
				case '(':
					openPar++;
					word += c;
					break;
					
				case ')':
					openPar--;
					word += c;
					if(openPar == 0 && foundWord) {
						ret.add(word);
						foundWord = false;
						word = "";
					}
					break;
			
				case '\'':
					if(openPar == 0) {
						if(openBrack) {
							word += c;
							openBrack=false;
							ret.add(word);
							foundWord = false;
							word = "";
						} else {
							openBrack = true;
							if(foundWord) {
								ret.add(word);
								foundWord = false;
								word = "";
							}
							word += c;
						}
					} else {
						word += c;
					}
					break;
					
				case ' ':
				case ',':
				case '\t':
				
					if(openPar ==0 && !openBrack) {
						if(foundWord) {
							ret.add(word);
							foundWord = false;
							word = "";
						}
					} else {
						word += c;
					}
					break;

					
				case '+':
				case '-':
				case '*':
				case '/':
				
					if(openPar ==0 && !openBrack) {
						if(foundWord) {
							ret.add(word);
							foundWord = false;
							word = "" + c;
							ret.add(word);
							word = "";
						}
					} else {
						word += c;
					}
					break;

				case '|':
					
					if(openPar ==0) {
						if(foundWord) {
							char c2 = s.charAt(nChar+1);
							if(c2 == '|') {
								ret.add(word);
								foundWord = false;
								word = "||";
								ret.add(word);
								word = "";
								nChar++;
							}
						}
					} else {
						word += c;
					}
					break;

				default:
					foundWord=true;
					word += c;
					break;
						
			}

    	}
    	
    	if(word.length() > 0) {
			ret.add(word);
    	}
    	
    	//IDCUtils.debug("openPar = " + openPar);
    	
    	return ret;
    	
    }
    
	/****************************************************************************
	 *  applyXSLT()                                                           *
	 ****************************************************************************/

	public void applyXSLT(String input, String xsltFileName, PrintWriter out) {
		
	      try {
	
			  TransformerFactory fact = TransformerFactory.newInstance();
	    	  Transformer trans = fact.newTransformer(new StreamSource(xsltFileName));
	    	  trans.transform( new DOMSource(stringToDom(input)), new StreamResult(out) );
	    	  
	      } catch (Exception e) { 
	    	  e.printStackTrace(); 
    	  }

	}
	
    public static Document stringToDom(String xmlSource) {

    	Document ret = null;
    	
    	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    	DocumentBuilder builder;
		try {
			builder = factory.newDocumentBuilder();
	    	ret = builder.parse(new InputSource(new StringReader(xmlSource)));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return ret;
		
    }

	/************************************************************************/

    public static Object loadCustomComponent(String className) {

    	Object ret = null;
    	
    	String msg = null;
		Class viewClass = null;
    	
    	if(className != null && className.length() > 0) {
    	    try {
    			viewClass = Class.forName(className);
    			ret = viewClass.newInstance();
    		} catch (Exception e) {
    			msg = "Could not find class " + className + " ...";
    		}
    	} else {
			msg = "No class name specified.";
    	}

		return ret;

    }
    
	/************************************************************************/

    public static Class loadCustomClass(String className) {

		Class ret = null;
    	
    	if(className != null && className.length() > 0) {
    	    try {
    			ret = Class.forName(className);
    		} catch (Exception e) {
    		}
    	}

		return ret;

    }

	/************************************************************************/

	public static void debugErrors(List<IDCError> errs) {
		
		for(IDCError err : errs) {
			System.out.println("> " + err.getMessage());
		}
		
	}
    
	/*******************************************************************************************************/
	
	public static List<String> readFileLines(File file) {
		
		List<String> ret = new ArrayList<String>();
		
		BufferedReader in;
		try {
			in = new BufferedReader(new FileReader(file));
			String line = in.readLine();
			while(line != null) {
				ret.add(line);
				line = in.readLine();
			}
			in.close();
		} catch (Exception e) {
			ret = null;
		}
		
		return ret;
		
	}
	
	/*******************************************************************************************************/
	
	public static List<String> parseCSVLine(String line) {

		//Utils.debug(line);

		List<String> ret = new ArrayList<String>();
					
		boolean openQuote = false;
		String word = "";
		boolean newWord = false;
		for(char c : line.toCharArray()) {
			switch(c) {
			
				case '"':
					if(openQuote) {
						openQuote = false;
					} else {
						openQuote = true;
					}
					break;

				case ',':
					if(!openQuote) {
						ret.add(word.trim());
						word = "";
						newWord = true;
					} else {
						word += c;
					}
					break;

				default:
					word += c;
					newWord = false;
					break;

			}
			
		}

		if(word.length() > 0 || newWord) {
			ret.add(word.trim());
		}
		
		//for(String w : ret) {
		//	Utils.debug(w);
		//}
		
		return ret;

	}
	
	/*******************************************************************************************************/
	
	public static List<List<String>> parseCSVFile(File file) {
		
		List<List<String>> ret = new ArrayList<List<String>>();
		
		BufferedReader in;
		
		try {
			in = new BufferedReader(new FileReader(file));
			String line = in.readLine();
			while(line != null) {
				ret.add(parseCSVLine(line));
				line = in.readLine();
			}
			in.close();
		} catch (Exception e) {
			ret = null;
		}
		
		return ret;
		
	}
	
	/*******************************************************************************************************/
	
	public static String getDateString(Date date) {
		return sdf.format(date);
	}

	/*******************************************************************************************************/
	
	public static String getDateString(long date) {
		return sdf.format(date);
	}

	/*******************************************************************************************************/
	
	public static String getAmountString(long amount) {
		
		String ret = "";

		String amountStr = "                             " + amount;
		amountStr = amountStr.substring(amountStr.length() - COL_WIDTH +1);
		
		int pointIndx = amountStr.length() -2;

		boolean started = false;
		int i=0;
		for(char c : amountStr.toCharArray()) {
			if(i == pointIndx) {
				if(!started) {
					ret += "0.";
					ret = ret.substring(1);
					started = true;
				} else {
					ret += ".";
				}
			}
			if(c == '0') {
				if(started) {
					ret += c;
				}
			} else if(c == ' ') {
				if(started) {
					ret += '0';
				} else {
					ret += c;
				}
			} else {
				ret += c;
				started = true;
			}
			i++;
		}
		
		return ret;
		
	}

	/*******************************************************************************************************/
	
	public static void sendNotification(List<String> distributionList, String title, String content) {
		
		debug("sendNotification(): ");
		for(String email : distributionList) {
			debug("sendNotification(): email = " + email);
		}
		debug("sendNotification(): title = " + title);
		debug("sendNotification(): content = " + content);
		
	}
	
	/************************************************************************************************/
    // JSP ...
    /************************************************************************************************/

	public static String  getJSPParam(HttpServletRequest request, String param) {
          	   
		String paramStr = request.getParameter(param);

		return (paramStr == null ? "" : paramStr);

	}

    /************************************************************************************************/

	public static boolean  getJSPBooleanParam(HttpServletRequest request, String param) {
          	   
		int value = getJSPIntParam(request, param);
          	   
		return value > 0;
          	   
	}

    /************************************************************************************************/

	public static int getJSPIntParam(HttpServletRequest request, String param) throws Error {

		int ret = -1;
		
		String paramStr = request.getParameter(param);
   	   	
		if(paramStr != null && paramStr.length() > 0) {
			try {
				ret = Integer.parseInt(paramStr);
			} catch(java.lang.NumberFormatException ex) {
			}
		}
    	   
		return ret;
    	   
	}
       
	/****************************************************************************
	 *  getLongParam()                                                           *
	 ****************************************************************************/

	public static long getJSPLongParam(HttpServletRequest request, String param) throws Error {

		long ret = -1;
		
		String paramStr = request.getParameter(param);
   	   	
		if(paramStr != null && paramStr.length() > 0) {
			try {
				ret = Long.parseLong(paramStr);
			} catch(java.lang.NumberFormatException ex) {
			}
		}
    	   
		return ret;
    	   
	}

}
